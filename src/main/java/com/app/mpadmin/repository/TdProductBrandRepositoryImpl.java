/*
 * (c) Copyright 2005-2012 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend-jpa:src/main/java/project/repository/RepositoryImpl.e.vm.java
 */
package com.app.mpadmin.repository;

import static org.apache.commons.lang.StringUtils.isNotEmpty;

import javax.inject.Inject;

import org.apache.log4j.Logger;

import javax.inject.Named;
import javax.inject.Singleton;
import org.springframework.transaction.annotation.Transactional;

import com.app.mpadmin.dao.support.GenericDao;
import com.app.mpadmin.repository.support.RepositoryImpl;
import com.app.mpadmin.domain.TdProductBrand;
import com.app.mpadmin.dao.TdProductBrandDao;

/**
 * Default implementation of the {@link TdProductBrandRepository} interface.
 * Note: you may use multiple DAO from this layer.
 * @see TdProductBrandRepository
 */
@Named("tdProductBrandRepository")
@Singleton
public class TdProductBrandRepositoryImpl extends RepositoryImpl<TdProductBrand, Integer> implements TdProductBrandRepository {

    @SuppressWarnings("unused")
    private static final Logger log = Logger.getLogger(TdProductBrandRepositoryImpl.class);

    protected TdProductBrandDao tdProductBrandDao;

    @Inject
    public void setTdProductBrandDao(TdProductBrandDao tdProductBrandDao) {
        this.tdProductBrandDao = tdProductBrandDao;
    }

    /**
     * Dao getter used by the {@link RepositoryImpl}.
     */
    @Override
    public GenericDao<TdProductBrand, Integer> getDao() {
        return tdProductBrandDao;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TdProductBrand getNew() {
        return new TdProductBrand();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TdProductBrand getNewWithDefaults() {
        TdProductBrand result = getNew();
        result.initDefaultValues();
        return result;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @Transactional(readOnly = true)
    public TdProductBrand get(TdProductBrand model) {
        if (model == null) {
            return null;
        }

        if (model.isIdSet()) {
            return super.get(model);
        }

        if (!isNotEmpty(model.getSeoUrl())) {
            TdProductBrand result = getBySeoUrl(model.getSeoUrl());
            if (result != null) {
                return result;
            }
        }

        return null;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @Transactional(readOnly = true)
    public TdProductBrand getBySeoUrl(String _seoUrl) {
        TdProductBrand tdProductBrand = new TdProductBrand();
        tdProductBrand.setSeoUrl(_seoUrl);
        return findUniqueOrNone(tdProductBrand);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @Transactional
    public void deleteBySeoUrl(String seoUrl) {
        delete(getBySeoUrl(seoUrl));
    }
}