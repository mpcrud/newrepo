/*
 * (c) Copyright 2005-2012 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend-jpa:src/main/java/project/repository/RepositoryImpl.e.vm.java
 */
package com.app.mpadmin.repository;

import static org.apache.commons.lang.StringUtils.isNotEmpty;

import javax.inject.Inject;

import org.apache.log4j.Logger;

import javax.inject.Named;
import javax.inject.Singleton;
import org.springframework.transaction.annotation.Transactional;

import com.app.mpadmin.dao.support.GenericDao;
import com.app.mpadmin.repository.support.RepositoryImpl;
import com.app.mpadmin.domain.AuthGroup;
import com.app.mpadmin.dao.AuthGroupDao;

/**
 * Default implementation of the {@link AuthGroupRepository} interface.
 * Note: you may use multiple DAO from this layer.
 * @see AuthGroupRepository
 */
@Named("authGroupRepository")
@Singleton
public class AuthGroupRepositoryImpl extends RepositoryImpl<AuthGroup, Integer> implements AuthGroupRepository {

    @SuppressWarnings("unused")
    private static final Logger log = Logger.getLogger(AuthGroupRepositoryImpl.class);

    protected AuthGroupDao authGroupDao;

    @Inject
    public void setAuthGroupDao(AuthGroupDao authGroupDao) {
        this.authGroupDao = authGroupDao;
    }

    /**
     * Dao getter used by the {@link RepositoryImpl}.
     */
    @Override
    public GenericDao<AuthGroup, Integer> getDao() {
        return authGroupDao;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AuthGroup getNew() {
        return new AuthGroup();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AuthGroup getNewWithDefaults() {
        AuthGroup result = getNew();
        result.initDefaultValues();
        return result;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @Transactional(readOnly = true)
    public AuthGroup get(AuthGroup model) {
        if (model == null) {
            return null;
        }

        if (model.isIdSet()) {
            return super.get(model);
        }

        if (!isNotEmpty(model.getName())) {
            AuthGroup result = getByName(model.getName());
            if (result != null) {
                return result;
            }
        }

        return null;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @Transactional(readOnly = true)
    public AuthGroup getByName(String _name) {
        AuthGroup authGroup = new AuthGroup();
        authGroup.setName(_name);
        return findUniqueOrNone(authGroup);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @Transactional
    public void deleteByName(String name) {
        delete(getByName(name));
    }
}