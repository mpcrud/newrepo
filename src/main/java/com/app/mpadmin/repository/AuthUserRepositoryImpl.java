/*
 * (c) Copyright 2005-2012 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend-jpa:src/main/java/project/repository/RepositoryImpl.e.vm.java
 */
package com.app.mpadmin.repository;

import static org.apache.commons.lang.StringUtils.isNotEmpty;

import javax.inject.Inject;

import org.apache.log4j.Logger;

import javax.inject.Named;
import javax.inject.Singleton;
import org.springframework.transaction.annotation.Transactional;

import com.app.mpadmin.dao.support.GenericDao;
import com.app.mpadmin.repository.support.RepositoryImpl;
import com.app.mpadmin.domain.AuthUser;
import com.app.mpadmin.domain.TdUserAuth;
import com.app.mpadmin.dao.AuthUserDao;
import com.app.mpadmin.dao.TdUserAuthDao;

/**
 * Default implementation of the {@link AuthUserRepository} interface.
 * Note: you may use multiple DAO from this layer.
 * @see AuthUserRepository
 */
@Named("authUserRepository")
@Singleton
public class AuthUserRepositoryImpl extends RepositoryImpl<TdUserAuth, Integer> implements AuthUserRepository {

    @SuppressWarnings("unused")
    private static final Logger log = Logger.getLogger(AuthUserRepositoryImpl.class);

    protected TdUserAuthDao tdUserAuthDao;

    @Inject
    public void setAuthUserDao(TdUserAuthDao tdUserAuthDao) {
        this.tdUserAuthDao = tdUserAuthDao;
    }

    /**
     * Dao getter used by the {@link RepositoryImpl}.
     */
    @Override
    public GenericDao<TdUserAuth, Integer> getDao() {
        return tdUserAuthDao;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TdUserAuth getNew() {
        return new TdUserAuth();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TdUserAuth getNewWithDefaults() {
    	TdUserAuth result = getNew();
        result.initDefaultValues();
        return result;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @Transactional(readOnly = true)
    public TdUserAuth get(TdUserAuth model) {
        if (model == null) {
            return null;
        }

        if (model.isIdSet()) {
            return super.get(model);
        }

        if (!isNotEmpty(model.getUsername())) {
        	TdUserAuth result = getByUsername(model.getUsername());
            if (result != null) {
                return result;
            }
        }

        return null;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @Transactional(readOnly = true)
    public TdUserAuth getByUsername(String _username) {
    	TdUserAuth authUser = new TdUserAuth();
        authUser.setUsername(_username);
        return findUniqueOrNone(authUser);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @Transactional
    public void deleteByUsername(String username) {
        delete(getByUsername(username));
    }
}