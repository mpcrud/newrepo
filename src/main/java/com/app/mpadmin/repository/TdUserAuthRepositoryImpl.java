/*
 * (c) Copyright 2005-2012 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend-jpa:src/main/java/project/repository/RepositoryImpl.e.vm.java
 */
package com.app.mpadmin.repository;

import javax.inject.Inject;

import org.apache.log4j.Logger;
import org.springframework.transaction.annotation.Transactional;

import javax.inject.Named;
import javax.inject.Singleton;

import com.app.mpadmin.dao.support.GenericDao;
import com.app.mpadmin.repository.support.RepositoryImpl;
import com.app.mpadmin.domain.TdUserAuth;
import com.app.mpadmin.dao.TdUserAuthDao;

/**
 * Default implementation of the {@link TdUserAuthRepository} interface.
 * Note: you may use multiple DAO from this layer.
 * @see TdUserAuthRepository
 */
@Named("tdUserAuthRepository")
@Singleton
public class TdUserAuthRepositoryImpl extends RepositoryImpl<TdUserAuth, Integer> implements TdUserAuthRepository {

    @SuppressWarnings("unused")
    private static final Logger log = Logger.getLogger(TdUserAuthRepositoryImpl.class);

    protected TdUserAuthDao tdUserAuthDao;

    @Inject
    public void setTdUserAuthDao(TdUserAuthDao tdUserAuthDao) {
        this.tdUserAuthDao = tdUserAuthDao;
    }

    /**
     * Dao getter used by the {@link RepositoryImpl}.
     */
    @Override
    public GenericDao<TdUserAuth, Integer> getDao() {
        return tdUserAuthDao;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TdUserAuth getNew() {
        return new TdUserAuth();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TdUserAuth getNewWithDefaults() {
        TdUserAuth result = getNew();
        result.initDefaultValues();
        return result;
    }
    
    @Override
    @Transactional(readOnly = true)
    public TdUserAuth getByUsername(String _username) {
        TdUserAuth authUser = new TdUserAuth();
        authUser.setUsername(_username);
        return findUniqueOrNone(authUser);
    }
    
    /**
     * {@inheritDoc}
     */
    @Override
    @Transactional
    public void deleteByUsername(String username) {
        delete(getByUsername(username));
    }

}