/*
 * (c) Copyright 2005-2012 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-jsf2-primefaces:src/main/java/component/JpaUniqueSupport.p.vm.java
 */
package com.app.mpadmin.web.component;

import static java.lang.String.format;
import static org.apache.commons.lang.StringUtils.isBlank;
import static org.springframework.core.annotation.AnnotationUtils.findAnnotation;

import java.lang.reflect.Field;
import java.lang.reflect.Method;

import javax.inject.Named;
import javax.inject.Singleton;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.PersistenceContext;

import com.app.mpadmin.domain.Identifiable;

/**
 * <ul>
 * <li>Check the presence of the {@link Identifiable} interface</li>
 * <li>Check the presence of the {@link Entity} annotation</li>
 * <li>Then using the {@link EntityManager} make a request to see if there is an existing entity</li>
 * </ul>
 */
@Named
@Singleton
public class JpaUniqueSupport {
    @PersistenceContext
    private EntityManager entityManager;

    public boolean isUnique(Identifiable<?> entity, String propertyName, Object propertyValue) {
        if (entity == null || propertyValue == null) {
            return true;
        }
        checkJpaEntityPresence(entity);
        return !existsInDatabase(getEntityName(entity), entity, propertyName, propertyValue);
    }

    private boolean existsInDatabase(String entityName, Identifiable<?> entity, String propertyName, Object propertyValue) {
        if (entity.isIdSet()) {
            return existsInDatabaseOnOtherObjects(entityName, entity, propertyName, propertyValue);
        } else {
            return existsInDatabaseOnAllObjects(entityName, entity, propertyName, propertyValue);
        }
    }

    private boolean existsInDatabaseOnAllObjects(String entityName, Identifiable<?> entity, String propertyName, Object propertyValue) {
        return entityManager //
                .createQuery( //
                        format("select count(c) from %s c where %s = :propertyValue", entityName, propertyName), Long.class) //
                .setParameter("propertyValue", propertyValue) //
                .getSingleResult() > 0;
    }

    private boolean existsInDatabaseOnOtherObjects(String entityName, Identifiable<?> entity, String propertyName, Object propertyValue) {
        return entityManager //
                .createQuery( //
                        format("select count(c) from %s c where %s = :propertyValue and %s != :id", //
                                entityName, propertyName, getPkAttributeName(entity.getClass())), Long.class) //
                .setParameter("propertyValue", propertyValue) //
                .setParameter("id", entity.getId()) //
                .getSingleResult() > 0;
    }

    private void checkJpaEntityPresence(Identifiable<?> value) {
        Entity entity = findAnnotation(value.getClass(), Entity.class);
        if (entity == null) {
            throw new IllegalStateException(value.getClass().getSimpleName() + " is not a JPA entity");
        }
    }

    private String getEntityName(Identifiable<?> value) {
        Entity entity = findAnnotation(value.getClass(), Entity.class);
        if (isBlank(entity.name())) {
            return value.getClass().getSimpleName();
        }
        return entity.name();
    }

    private String getPkAttributeName(Class<?> clazz) {
        String pkAttributeName = getPkAttributeName(clazz, Id.class);
        return pkAttributeName != null ? pkAttributeName : getPkAttributeName(EmbeddedId.class);
    }

    @SuppressWarnings( { "rawtypes", "unchecked" })
    private String getPkAttributeName(Class<?> clazz, Class annotation) {
        for (Method m : clazz.getMethods()) {
            if (findAnnotation(m, annotation) != null) {
                return methodToProperty(m);
            }
        }
        for (Field f : clazz.getFields()) {
            if (f.getAnnotation(annotation) != null) {
                return f.getName();
            }
        }
        return null;
    }

    private String methodToProperty(Method m) {
        String value = m.getName();
        if (value.startsWith("get")) {
            int length = "get".length();
            return value.substring(length, length + 1).toLowerCase() + value.substring(length + 1);
        } else if (value.startsWith("is")) {
            int length = "is".length();
            return value.substring(length, length + 1).toLowerCase() + value.substring(length + 1);
        } else {
            return value;
        }
    }
}