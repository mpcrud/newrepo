/*
 * (c) Copyright 2005-2012 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-jsf2-primefaces:src/main/java/filter/ExceptionFilter.p.vm.java
 */
package com.app.mpadmin.web.filter;

import java.io.IOException;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.springframework.webflow.execution.FlowExecutionException;
import org.springframework.webflow.execution.repository.FlowExecutionRestorationFailureException;

/**
 * In case of exception, this filter redirects the user to a view that depends on the type of request (ajax or not) and the kind of exception (flow exception or not). 
 * In addition, this filter intercepts Ajax request corresponding to an expired session and redirects the user to the login page.
 * _HACK_ as we had to implement it ourselves.
 */
public final class ExceptionFilter implements Filter {
    private static final Logger log = Logger.getLogger(ExceptionFilter.class);

    @Override
    public void init(FilterConfig config) throws ServletException {
    }

    @Override
    public void doFilter(ServletRequest req, ServletResponse resp, FilterChain chain) throws IOException, ServletException {

        try {
            // chain...
            HttpServletRequest request = (HttpServletRequest) req;

            if (isAjax(request) && !request.isRequestedSessionIdValid()) {
                log.warn("Session expiration during ajax request, partial redirect to login page");
                HttpServletResponse response = (HttpServletResponse) resp;
                response.getWriter().print(xmlPartialRedirectToPage(request, "/login?session_expired=1"));
                response.flushBuffer();
            } else {
                chain.doFilter(req, resp);
            }

        } catch (Exception e) {
            // redirect to error page
            HttpServletRequest request = (HttpServletRequest) req;
            request.getSession().setAttribute("lastException", e);
            request.getSession().setAttribute("lastExceptionUniqueId", e.hashCode());

            log.error("EXCEPTION unique id: " + e.hashCode(), e);

            HttpServletResponse response = (HttpServletResponse) resp;

            Throwable cause = e.getCause();
            String redirectionUrl = null;

            if (cause instanceof FlowExecutionRestorationFailureException) {
                redirectionUrl = "/home";
            } else if (cause instanceof FlowExecutionException) {
                redirectionUrl = request.getPathInfo() + "?execution=" + req.getParameter("execution");
            } else {
                redirectionUrl = "/error";
            }

            if (isAjax(request)) {
                // let's leverage jsf2 partial response
                response.getWriter().print(xmlPartialRedirectToPage(request, redirectionUrl));
                response.flushBuffer();
            } else {
                response.sendRedirect(request.getContextPath() + request.getServletPath() + redirectionUrl);
            }
        }
    }

    private String xmlPartialRedirectToPage(HttpServletRequest request, String page) {
        return "<?xml version='1.0' encoding='UTF-8'?>" //
                + "<partial-response>" //
                + "<redirect url=\"" + request.getContextPath() + request.getServletPath() + page + "\"/>" //
                + "</partial-response>";
    }

    private boolean isAjax(HttpServletRequest request) {
        return "XMLHttpRequest".equals(request.getHeader("X-Requested-With"));
    }

    @Override
    public void destroy() {
    }
}