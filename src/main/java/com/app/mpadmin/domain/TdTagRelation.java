/*
 * (c) Copyright 2005-2012 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend-jpa:src/main/java/project/domain/Entity.e.vm.java
 */
package com.app.mpadmin.domain;

import static javax.persistence.CascadeType.PERSIST;
import static javax.persistence.FetchType.LAZY;
import static javax.persistence.TemporalType.TIMESTAMP;
import static org.hibernate.annotations.CacheConcurrencyStrategy.NONSTRICT_READ_WRITE;
import java.io.Serializable;
import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.PrePersist;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.Transient;
import javax.validation.constraints.NotNull;
import javax.xml.bind.annotation.XmlTransient;
import org.apache.log4j.Logger;
import org.hibernate.annotations.Cache;
import com.app.mpadmin.domain.PersistableHashBuilder;
import com.app.mpadmin.domain.TdTag;
import com.google.common.base.Objects;

@Entity
@Table(name = "td_tag_relation")
@Cache(usage = NONSTRICT_READ_WRITE)
public class TdTagRelation implements Identifiable<Integer>, Serializable {
    private static final long serialVersionUID = 1L;
    private static final Logger log = Logger.getLogger(TdTagRelation.class);

    // Raw attributes
    private Integer tagRelationId; // pk
    private Date creationDate;
    private Date updationDate;
    private Integer tagStatus;
    private Integer isActive;

    // Technical attributes for query by example
    private Integer currentTagId;
    private Integer parentTagId;

    // Many to one
    private TdTag parentTag; // (parentTagId)
    private TdTag currentTag; // (currentTagId)

    // ---------------------------
    // Constructors
    // ---------------------------

    public TdTagRelation() {
    }

    public TdTagRelation(Integer primaryKey) {
        setId(primaryKey);
    }

    // ---------------------------
    // Identifiable implementation
    // ---------------------------

    @Override
    @Transient
    @XmlTransient
    public Integer getId() {
        return getTagRelationId();
    }

    @Override
    public void setId(Integer tagRelationId) {
        setTagRelationId(tagRelationId);
    }

    @Override
    @Transient
    @XmlTransient
    public boolean isIdSet() {
        return isTagRelationIdSet();
    }

    // -------------------------------
    // Getter & Setter
    // -------------------------------

    // -- [tagRelationId] ------------------------

    @NotNull
    @Column(name = "tag_relation_id", precision = 10)
    @Id
    public Integer getTagRelationId() {
        return tagRelationId;
    }

    public void setTagRelationId(Integer tagRelationId) {
        this.tagRelationId = tagRelationId;
    }

    @Transient
    public boolean isTagRelationIdSet() {
        return tagRelationId != null;
    }

    // -- [currentTagId] ------------------------

    @Column(name = "current_tag_id", precision = 10, insertable = false, updatable = false)
    public Integer getCurrentTagId() {
        return currentTagId;
    }

    private void setCurrentTagId(Integer currentTagId) {
        this.currentTagId = currentTagId;
    }

    // -- [parentTagId] ------------------------

    @Column(name = "parent_tag_id", precision = 10, insertable = false, updatable = false)
    public Integer getParentTagId() {
        return parentTagId;
    }

    private void setParentTagId(Integer parentTagId) {
        this.parentTagId = parentTagId;
    }

    // -- [creationDate] ------------------------

    @Column(name = "creation_date", length = 19)
    @Temporal(TIMESTAMP)
    public Date getCreationDate() {
        return creationDate;
    }

    public void setCreationDate(Date creationDate) {
        this.creationDate = creationDate;
    }

    // -- [updationDate] ------------------------

    @Column(name = "updation_date", length = 19)
    @Temporal(TIMESTAMP)
    public Date getUpdationDate() {
        return updationDate;
    }

    public void setUpdationDate(Date updationDate) {
        this.updationDate = updationDate;
    }

    // -- [tagStatus] ------------------------

    @Column(name = "tag_status", precision = 5)
    public Integer getTagStatus() {
        return tagStatus;
    }

    public void setTagStatus(Integer tagStatus) {
        this.tagStatus = tagStatus;
    }

    // -- [isActive] ------------------------

    @Column(name = "is_active", precision = 5)
    public Integer getIsActive() {
        return isActive;
    }

    public void setIsActive(Integer isActive) {
        this.isActive = isActive;
    }

    // --------------------------------------------------------------------
    // Many to One support
    // --------------------------------------------------------------------

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // many-to-one: TdTagRelation.parentTagId ==> TdTag.tagId
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @Cache(usage = NONSTRICT_READ_WRITE)
    @JoinColumn(name = "parent_tag_id")
    @ManyToOne(cascade = PERSIST, fetch = LAZY)
    public TdTag getParentTag() {
        return parentTag;
    }

    /**
     * Set the parentTag without adding this TdTagRelation instance on the passed parentTag
     * If you want to preserve referential integrity we recommend to use
     * instead the corresponding adder method provided by {@link TdTag}
     */
    public void setParentTag(TdTag parentTag) {
        this.parentTag = parentTag;

        // We set the foreign key property so it can be used by our JPA search by Example facility.
        if (parentTag != null) {
            setParentTagId(parentTag.getTagId());
        } else {
            setParentTagId(null);
        }
    }

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // many-to-one: TdTagRelation.currentTagId ==> TdTag.tagId
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @Cache(usage = NONSTRICT_READ_WRITE)
    @JoinColumn(name = "current_tag_id")
    @ManyToOne(cascade = PERSIST, fetch = LAZY)
    public TdTag getCurrentTag() {
        return currentTag;
    }

    /**
     * Set the currentTag without adding this TdTagRelation instance on the passed currentTag
     * If you want to preserve referential integrity we recommend to use
     * instead the corresponding adder method provided by {@link TdTag}
     */
    public void setCurrentTag(TdTag currentTag) {
        this.currentTag = currentTag;

        // We set the foreign key property so it can be used by our JPA search by Example facility.
        if (currentTag != null) {
            setCurrentTagId(currentTag.getTagId());
        } else {
            setCurrentTagId(null);
        }
    }

    /**
     * Set the default values.
     */
    public void initDefaultValues() {
    }

    /**
     * equals implementation using a business key.
     */
    @Override
    public boolean equals(Object other) {
        return this == other || (other instanceof TdTagRelation && hashCode() == other.hashCode());
    }

    private PersistableHashBuilder persistableHashBuilder = new PersistableHashBuilder();

    @Override
    public int hashCode() {
        return persistableHashBuilder.hash(log, this);
    }

    /**
     * Construct a readable string representation for this TdTagRelation instance.
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        return Objects.toStringHelper(this) //
                .add("tagRelationId", getTagRelationId()) //
                .add("currentTagId", getCurrentTagId()) //
                .add("parentTagId", getParentTagId()) //
                .add("creationDate", getCreationDate()) //
                .add("updationDate", getUpdationDate()) //
                .add("tagStatus", getTagStatus()) //
                .add("isActive", getIsActive()) //
                .toString();
    }

    @PrePersist
    protected void prePersist() {
        setCreationDate(new Date());
    }
}