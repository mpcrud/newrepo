/*
 * (c) Copyright 2005-2012 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend-jpa:src/main/java/project/domain/Entity.e.vm.java
 */
package com.app.mpadmin.domain;

import static javax.persistence.CascadeType.PERSIST;
import static javax.persistence.FetchType.LAZY;
import static javax.persistence.TemporalType.TIMESTAMP;
import static org.hibernate.annotations.CacheConcurrencyStrategy.NONSTRICT_READ_WRITE;
import java.io.Serializable;
import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.PrePersist;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.Transient;
import javax.validation.constraints.NotNull;
import javax.xml.bind.annotation.XmlTransient;
import org.apache.log4j.Logger;
import org.hibernate.annotations.Cache;
import com.app.mpadmin.domain.PersistableHashBuilder;
import com.app.mpadmin.domain.TdTag;
import com.app.mpadmin.domain.TdUserAuth;
import com.google.common.base.Objects;

@Entity
@Table(name = "td_user_tag_preference")
@Cache(usage = NONSTRICT_READ_WRITE)
public class TdUserTagPreference implements Identifiable<Integer>, Serializable {
    private static final long serialVersionUID = 1L;
    private static final Logger log = Logger.getLogger(TdUserTagPreference.class);

    // Raw attributes
    private Integer userTagPreferenceId; // pk
    private Date creationDate; // not null
    private Date updationDate; // not null

    // Technical attributes for query by example
    private Integer userId;
    private Integer tagId;

    // Many to one
    private TdUserAuth user; // (userId)
    private TdTag tag; // (tagId)

    // ---------------------------
    // Constructors
    // ---------------------------

    public TdUserTagPreference() {
    }

    public TdUserTagPreference(Integer primaryKey) {
        setId(primaryKey);
    }

    // ---------------------------
    // Identifiable implementation
    // ---------------------------

    @Override
    @Transient
    @XmlTransient
    public Integer getId() {
        return getUserTagPreferenceId();
    }

    @Override
    public void setId(Integer userTagPreferenceId) {
        setUserTagPreferenceId(userTagPreferenceId);
    }

    @Override
    @Transient
    @XmlTransient
    public boolean isIdSet() {
        return isUserTagPreferenceIdSet();
    }

    // -------------------------------
    // Getter & Setter
    // -------------------------------

    // -- [userTagPreferenceId] ------------------------

    @NotNull
    @Column(name = "user_tag_preference_id", precision = 10)
    @Id
    public Integer getUserTagPreferenceId() {
        return userTagPreferenceId;
    }

    public void setUserTagPreferenceId(Integer userTagPreferenceId) {
        this.userTagPreferenceId = userTagPreferenceId;
    }

    @Transient
    public boolean isUserTagPreferenceIdSet() {
        return userTagPreferenceId != null;
    }

    // -- [userId] ------------------------

    @Column(name = "user_id", precision = 10, insertable = false, updatable = false)
    public Integer getUserId() {
        return userId;
    }

    private void setUserId(Integer userId) {
        this.userId = userId;
    }

    // -- [tagId] ------------------------

    @Column(name = "tag_id", precision = 10, insertable = false, updatable = false)
    public Integer getTagId() {
        return tagId;
    }

    private void setTagId(Integer tagId) {
        this.tagId = tagId;
    }

    // -- [creationDate] ------------------------

    @Column(name = "creation_date", nullable = false, length = 19)
    @Temporal(TIMESTAMP)
    public Date getCreationDate() {
        return creationDate;
    }

    public void setCreationDate(Date creationDate) {
        this.creationDate = creationDate;
    }

    // -- [updationDate] ------------------------

    @NotNull
    @Column(name = "updation_date", nullable = false, length = 19)
    @Temporal(TIMESTAMP)
    public Date getUpdationDate() {
        return updationDate;
    }

    public void setUpdationDate(Date updationDate) {
        this.updationDate = updationDate;
    }

    // --------------------------------------------------------------------
    // Many to One support
    // --------------------------------------------------------------------

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // many-to-one: TdUserTagPreference.userId ==> TdUserAuth.userId
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @Cache(usage = NONSTRICT_READ_WRITE)
    @JoinColumn(name = "user_id")
    @ManyToOne(cascade = PERSIST, fetch = LAZY)
    public TdUserAuth getUser() {
        return user;
    }

    /**
     * Set the user without adding this TdUserTagPreference instance on the passed user
     * If you want to preserve referential integrity we recommend to use
     * instead the corresponding adder method provided by {@link TdUserAuth}
     */
    public void setUser(TdUserAuth user) {
        this.user = user;

        // We set the foreign key property so it can be used by our JPA search by Example facility.
        if (user != null) {
            setUserId(user.getUserId());
        } else {
            setUserId(null);
        }
    }

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // many-to-one: TdUserTagPreference.tagId ==> TdTag.tagId
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @Cache(usage = NONSTRICT_READ_WRITE)
    @JoinColumn(name = "tag_id")
    @ManyToOne(cascade = PERSIST, fetch = LAZY)
    public TdTag getTag() {
        return tag;
    }

    /**
     * Set the tag without adding this TdUserTagPreference instance on the passed tag
     * If you want to preserve referential integrity we recommend to use
     * instead the corresponding adder method provided by {@link TdTag}
     */
    public void setTag(TdTag tag) {
        this.tag = tag;

        // We set the foreign key property so it can be used by our JPA search by Example facility.
        if (tag != null) {
            setTagId(tag.getTagId());
        } else {
            setTagId(null);
        }
    }

    /**
     * Set the default values.
     */
    public void initDefaultValues() {
    }

    /**
     * equals implementation using a business key.
     */
    @Override
    public boolean equals(Object other) {
        return this == other || (other instanceof TdUserTagPreference && hashCode() == other.hashCode());
    }

    private PersistableHashBuilder persistableHashBuilder = new PersistableHashBuilder();

    @Override
    public int hashCode() {
        return persistableHashBuilder.hash(log, this);
    }

    /**
     * Construct a readable string representation for this TdUserTagPreference instance.
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        return Objects.toStringHelper(this) //
                .add("userTagPreferenceId", getUserTagPreferenceId()) //
                .add("userId", getUserId()) //
                .add("tagId", getTagId()) //
                .add("creationDate", getCreationDate()) //
                .add("updationDate", getUpdationDate()) //
                .toString();
    }

    @PrePersist
    protected void prePersist() {
        setCreationDate(new Date());
    }
}