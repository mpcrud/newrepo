/*
 * (c) Copyright 2005-2012 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend-jpa:src/main/java/project/domain/Entity.e.vm.java
 */
package com.app.mpadmin.domain;

import static javax.persistence.CascadeType.PERSIST;
import static javax.persistence.FetchType.LAZY;
import static org.hibernate.annotations.CacheConcurrencyStrategy.NONSTRICT_READ_WRITE;
import java.io.Serializable;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlTransient;
import org.apache.log4j.Logger;
import org.hibernate.annotations.Cache;
import com.app.mpadmin.domain.PersistableHashBuilder;
import com.google.common.base.Objects;

@Entity
@Table(name = "td_product_submodel")
@Cache(usage = NONSTRICT_READ_WRITE)
public class TdProductSubmodel implements Identifiable<Integer>, Serializable {
    private static final long serialVersionUID = 1L;
    private static final Logger log = Logger.getLogger(TdProductSubmodel.class);

    // Raw attributes
    private Integer productSubmodelId; // pk
    private Integer submodelYearMappingId; // not null
    private Integer productId; // not null
    private String makeInternalProductCode;
    private String productSubmodelApplyLocation;
    
    //Many to One
    private TdSubmodelYearMapping submodelYearMapping;
    private TdProduct product;

    // ---------------------------
    // Constructors
    // ---------------------------

    public TdProductSubmodel() {
    }

    public TdProductSubmodel(Integer primaryKey) {
        setId(primaryKey);
    }

    // ---------------------------
    // Identifiable implementation
    // ---------------------------

    @Override
    @Transient
    @XmlTransient
    public Integer getId() {
        return getProductSubmodelId();
    }

    @Override
    public void setId(Integer productSubmodelId) {
        setProductSubmodelId(productSubmodelId);
    }

    @Override
    @Transient
    @XmlTransient
    public boolean isIdSet() {
        return isProductSubmodelIdSet();
    }

    // -------------------------------
    // Getter & Setter
    // -------------------------------

    // -- [productSubmodelId] ------------------------

    @NotNull
    @Column(name = "product_submodel_id", precision = 10)
    @Id
    public Integer getProductSubmodelId() {
        return productSubmodelId;
    }

    public void setProductSubmodelId(Integer productSubmodelId) {
        this.productSubmodelId = productSubmodelId;
    }

    @Transient
    public boolean isProductSubmodelIdSet() {
        return productSubmodelId != null;
    }

    // -- [submodelYearMappingId] ------------------------

    @NotNull
    @Column(name = "submodel_year_mapping_id", nullable = false, precision = 10,insertable=false,updatable=false)
    public Integer getSubmodelYearMappingId() {
        return submodelYearMappingId;
    }

    public void setSubmodelYearMappingId(Integer submodelYearMappingId) {
        this.submodelYearMappingId = submodelYearMappingId;
    }

    // -- [productId] ------------------------

    @NotNull
    @Column(name = "product_id", nullable = false, precision = 10,insertable=false,updatable=false)
    public Integer getProductId() {
        return productId;
    }

    public void setProductId(Integer productId) {
        this.productId = productId;
    }

    // -- [makeInternalProductCode] ------------------------

    @Size(max = 128)
    @Column(name = "make_internal_product_code", length = 128)
    public String getMakeInternalProductCode() {
        return makeInternalProductCode;
    }

    public void setMakeInternalProductCode(String makeInternalProductCode) {
        this.makeInternalProductCode = makeInternalProductCode;
    }

    // -- [productSubmodelApplyLocation] ------------------------

    @Size(max = 512)
    @Column(name = "product_submodel_apply_location", length = 512)
    public String getProductSubmodelApplyLocation() {
        return productSubmodelApplyLocation;
    }

    public void setProductSubmodelApplyLocation(String productSubmodelApplyLocation) {
        this.productSubmodelApplyLocation = productSubmodelApplyLocation;
    }
    
    
 // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // many-to-one: TdProductSubmodel.productId ==> TdProduct.productId
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @Cache(usage = NONSTRICT_READ_WRITE)
    @JoinColumn(name = "product_id")
    @ManyToOne(cascade = PERSIST, fetch = LAZY)
    public TdProduct getProduct() {
        return product;
    }

    /**
     * Set the product without adding this TdProductSubmodel instance on the passed product
     * If you want to preserve referential integrity we recommend to use
     * instead the corresponding adder method provided by {@link TdProduct}
     */
    public void setProduct(TdProduct product) {
        this.product = product;

        // We set the foreign key property so it can be used by our JPA search by Example facility.
        if (product != null) {
            setProductId(product.getProductId());
        } else {
            setProductId(null);
        }
    }
    
 // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // many-to-one: TdProductSubmodel.submodelYearMappingId ==> TdSubmodelYearMapping.submodelYearMappingId
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @Cache(usage = NONSTRICT_READ_WRITE)
    @JoinColumn(name = "submodel_year_mapping_id")
    @ManyToOne(cascade = PERSIST, fetch = LAZY)
    public TdSubmodelYearMapping getSubmodelYearMapping() {
        return submodelYearMapping;
    }

    /**
     * Set the submodelYearMapping without adding this TdProductSubmodel instance on the passed submodelYearMapping
     * If you want to preserve referential integrity we recommend to use
     * instead the corresponding adder method provided by {@link TdSubmodelYearMapping}
     */
    public void setSubmodelYearMapping(TdSubmodelYearMapping submodelYearMapping) {
        this.submodelYearMapping = submodelYearMapping;

        // We set the foreign key property so it can be used by our JPA search by Example facility.
        if (submodelYearMapping != null) {
            setSubmodelYearMappingId(submodelYearMapping.getSubmodelYearMappingId());
        } else {
            setSubmodelYearMappingId(null);
        }
    }

    /**
     * Set the default values.
     */
    public void initDefaultValues() {
    }

    /**
     * equals implementation using a business key.
     */
    @Override
    public boolean equals(Object other) {
        return this == other || (other instanceof TdProductSubmodel && hashCode() == other.hashCode());
    }

    private PersistableHashBuilder persistableHashBuilder = new PersistableHashBuilder();

    @Override
    public int hashCode() {
        return persistableHashBuilder.hash(log, this);
    }

    /**
     * Construct a readable string representation for this TdProductSubmodel instance.
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        return Objects.toStringHelper(this) //
                .add("productSubmodelId", getProductSubmodelId()) //
                .add("submodelYearMappingId", getSubmodelYearMappingId()) //
                .add("productId", getProductId()) //
                .add("makeInternalProductCode", getMakeInternalProductCode()) //
                .add("productSubmodelApplyLocation", getProductSubmodelApplyLocation()) //
                .toString();
    }
}