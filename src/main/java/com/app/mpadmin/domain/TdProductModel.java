/*
 * (c) Copyright 2005-2012 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend-jpa:src/main/java/project/domain/Entity.e.vm.java
 */
package com.app.mpadmin.domain;

import static javax.persistence.CascadeType.PERSIST;
import static javax.persistence.FetchType.LAZY;
import static org.hibernate.annotations.CacheConcurrencyStrategy.NONSTRICT_READ_WRITE;
import java.io.Serializable;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.validation.constraints.NotNull;
import javax.xml.bind.annotation.XmlTransient;
import org.apache.log4j.Logger;
import org.hibernate.annotations.Cache;
import com.app.mpadmin.domain.PersistableHashBuilder;
import com.google.common.base.Objects;

@Entity
@Table(name = "td_product_model")
@Cache(usage = NONSTRICT_READ_WRITE)
public class TdProductModel implements Identifiable<Integer>, Serializable {
    private static final long serialVersionUID = 1L;
    private static final Logger log = Logger.getLogger(TdProductModel.class);

    // Raw attributes
    private Integer productModelId; // pk
    private Integer makeModelId; // not null
    private Integer productId; // not null
    
    //Many to One
    private TdMakeModel makeModel;
    private TdProduct product;

    // ---------------------------
    // Constructors
    // ---------------------------

    public TdProductModel() {
    }

    public TdProductModel(Integer primaryKey) {
        setId(primaryKey);
    }

    // ---------------------------
    // Identifiable implementation
    // ---------------------------

    @Override
    @Transient
    @XmlTransient
    public Integer getId() {
        return getProductModelId();
    }

    @Override
    public void setId(Integer productModelId) {
        setProductModelId(productModelId);
    }

    @Override
    @Transient
    @XmlTransient
    public boolean isIdSet() {
        return isProductModelIdSet();
    }

    // -------------------------------
    // Getter & Setter
    // -------------------------------

    // -- [productModelId] ------------------------

    @NotNull
    @Column(name = "product_model_id", precision = 10)
    @Id
    public Integer getProductModelId() {
        return productModelId;
    }

    public void setProductModelId(Integer productModelId) {
        this.productModelId = productModelId;
    }

    @Transient
    public boolean isProductModelIdSet() {
        return productModelId != null;
    }

    // -- [makeModelId] ------------------------

    @NotNull
    @Column(name = "make_model_id", nullable = false, precision = 10,updatable=false,insertable=false)
    public Integer getMakeModelId() {
        return makeModelId;
    }

    public void setMakeModelId(Integer makeModelId) {
        this.makeModelId = makeModelId;
    }

    // -- [productId] ------------------------

    @NotNull
    @Column(name = "product_id", nullable = false, precision = 10,updatable=false,insertable=false)
    public Integer getProductId() {
        return productId;
    }

    public void setProductId(Integer productId) {
        this.productId = productId;
    }

    
 // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // many-to-one: TdProductModel.makeModelId ==> TdMakeModel.makeModelId
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @Cache(usage = NONSTRICT_READ_WRITE)
    @JoinColumn(name = "make_model_id")
    @ManyToOne(cascade = PERSIST, fetch = LAZY)
    public TdMakeModel getMakeModel() {
        return makeModel;
    }

    /**
     * Set the makeModel without adding this TdProductModel instance on the passed makeModel
     * If you want to preserve referential integrity we recommend to use
     * instead the corresponding adder method provided by {@link TdMakeModel}
     */
    public void setMakeModel(TdMakeModel makeModel) {
        this.makeModel = makeModel;

        // We set the foreign key property so it can be used by our JPA search by Example facility.
        if (makeModel != null) {
            setMakeModelId(makeModel.getMakeModelId());
        } else {
            setMakeModelId(null);
        }
    }
    
 // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // many-to-one: TdProductModel.productId ==> TdProduct.productId
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @Cache(usage = NONSTRICT_READ_WRITE)
    @JoinColumn(name = "product_id")
    @ManyToOne(cascade = PERSIST, fetch = LAZY)
    public TdProduct getProduct() {
        return product;
    }

    /**
     * Set the product without adding this TdProductModel instance on the passed product
     * If you want to preserve referential integrity we recommend to use
     * instead the corresponding adder method provided by {@link TdProduct}
     */
    public void setProduct(TdProduct product) {
        this.product = product;

        // We set the foreign key property so it can be used by our JPA search by Example facility.
        if (product != null) {
            setProductId(product.getProductId());
        } else {
            setProductId(null);
        }
    }
    
    /**
     * Set the default values.
     */
    public void initDefaultValues() {
    }

    /**
     * equals implementation using a business key.
     */
    @Override
    public boolean equals(Object other) {
        return this == other || (other instanceof TdProductModel && hashCode() == other.hashCode());
    }

    private PersistableHashBuilder persistableHashBuilder = new PersistableHashBuilder();

    @Override
    public int hashCode() {
        return persistableHashBuilder.hash(log, this);
    }

    /**
     * Construct a readable string representation for this TdProductModel instance.
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        return Objects.toStringHelper(this) //
                .add("productModelId", getProductModelId()) //
                .add("makeModelId", getMakeModelId()) //
                .add("productId", getProductId()) //
                .toString();
    }
}