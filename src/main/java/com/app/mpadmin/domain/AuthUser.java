/*
 * (c) Copyright 2005-2012 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend-jpa:src/main/java/project/domain/Entity.e.vm.java
 */
package com.app.mpadmin.domain;

import static javax.persistence.TemporalType.TIMESTAMP;
import static org.hibernate.annotations.CacheConcurrencyStrategy.NONSTRICT_READ_WRITE;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.Transient;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlTransient;
import org.apache.log4j.Logger;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.Filter;
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.ParamDef;
import org.hibernate.validator.constraints.Email;
import org.hibernate.validator.constraints.NotEmpty;
import com.google.common.base.Objects;

@Entity
@Table(name = "auth_user")
@Cache(usage = NONSTRICT_READ_WRITE)
@FilterDef(name = "myAuthUserFilter", defaultCondition = "id = :currentAccountId ", parameters = @ParamDef(name = "currentAccountId", type = "org.hibernate.type.IntegerType"))
@Filter(name = "myAuthUserFilter")
public class AuthUser implements Identifiable<Integer>, Serializable {
    private static final long serialVersionUID = 1L;
    private static final Logger log = Logger.getLogger(AuthUser.class);

    // Raw attributes
    private Integer id; // pk
    private String username; // unique (not null)
    private String firstName; // not null
    private String lastName; // not null
    private String email; // not null
    private String password; // not null
    private Boolean isStaff; // not null
    private Boolean isActive; // not null
    private Boolean isSuperuser; // not null
    private Date lastLogin; // not null
    private Date dateJoined; // not null

    // ---------------------------
    // Constructors
    // ---------------------------

    public AuthUser() {
    }

    public AuthUser(Integer primaryKey) {
        setId(primaryKey);
    }

    // -------------------------------
    // Role names support
    // -------------------------------

    /**
     * Default implementation returns hard coded granted authorities for this account (i.e. "ROLE_USER" and "ROLE_ADMIN").
     * TODO: You should override this method to provide your own custom authorities using your own logic.
     * Or you can follow Celerio Account Table convention. Please refer to Celerio Documentation.
     */
    @Transient
    @XmlTransient
    public List<String> getRoleNames() {
        List<String> roleNames = new ArrayList<String>();
        if ("user".equalsIgnoreCase(getUsername())) {
            roleNames.add("ROLE_USER");
        } else if ("admin".equalsIgnoreCase(getUsername())) {
            roleNames.add("ROLE_USER");
            roleNames.add("ROLE_ADMIN");
        }

        log.warn("Returning hard coded role names. TODO: get the real role names");
        return roleNames;
    }

    // -------------------------------
    // Getter & Setter
    // -------------------------------

    // -- [id] ------------------------

    @Column(precision = 10)
    @GeneratedValue
    @Id
    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Transient
    public boolean isIdSet() {
        return id != null;
    }

    // -- [username] ------------------------

    @Size(max = 30)
    @NotEmpty
    @Column(nullable = false, unique = true, length = 30)
    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    // -- [firstName] ------------------------

    @Size(max = 30)
    @NotEmpty
    @Column(name = "first_name", nullable = false, length = 30)
    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    // -- [lastName] ------------------------

    @Size(max = 30)
    @NotEmpty
    @Column(name = "last_name", nullable = false, length = 30)
    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    // -- [email] ------------------------

    @Size(max = 75)
    @NotEmpty
    @Email
    @Column(nullable = false, length = 75)
    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    // -- [password] ------------------------

    @Size(max = 128)
    @NotEmpty
    @Column(name = "`password`", nullable = false, length = 128)
    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    // -- [isStaff] ------------------------

    @NotNull
    @Column(name = "is_staff", nullable = false, length = 0)
    public Boolean getIsStaff() {
        return isStaff;
    }

    public void setIsStaff(Boolean isStaff) {
        this.isStaff = isStaff;
    }

    // -- [isActive] ------------------------

    @NotNull
    @Column(name = "is_active", nullable = false, length = 0)
    public Boolean getIsActive() {
        return isActive;
    }

    public void setIsActive(Boolean isActive) {
        this.isActive = isActive;
    }

    // -- [isSuperuser] ------------------------

    @NotNull
    @Column(name = "is_superuser", nullable = false, length = 0)
    public Boolean getIsSuperuser() {
        return isSuperuser;
    }

    public void setIsSuperuser(Boolean isSuperuser) {
        this.isSuperuser = isSuperuser;
    }

    // -- [lastLogin] ------------------------

    @NotNull
    @Column(name = "last_login", nullable = false, length = 19)
    @Temporal(TIMESTAMP)
    public Date getLastLogin() {
        return lastLogin;
    }

    public void setLastLogin(Date lastLogin) {
        this.lastLogin = lastLogin;
    }

    // -- [dateJoined] ------------------------

    @NotNull
    @Column(name = "date_joined", nullable = false, length = 19)
    @Temporal(TIMESTAMP)
    public Date getDateJoined() {
        return dateJoined;
    }

    public void setDateJoined(Date dateJoined) {
        this.dateJoined = dateJoined;
    }

    /**
     * Set the default values.
     */
    public void initDefaultValues() {
    }

    /**
     * equals implementation using a business key.
     */
    @Override
    public boolean equals(Object other) {
        return this == other || (other instanceof AuthUser && hashCode() == other.hashCode());
    }

    private volatile int previousHashCode = 0;

    @Override
    public int hashCode() {
        int hashCode = Objects.hashCode(getUsername());
        if (previousHashCode != 0 && previousHashCode != hashCode) {
            log.warn("DEVELOPER: hashCode has changed!." //
                    + "If you encounter this message you should take the time to carefuly review equals/hashCode for: " //
                    + getClass().getCanonicalName());
        }

        previousHashCode = hashCode;
        return hashCode;
    }

    /**
     * Construct a readable string representation for this AuthUser instance.
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        return Objects.toStringHelper(this) //
                .add("id", getId()) //
                .add("username", getUsername()) //
                .add("firstName", getFirstName()) //
                .add("lastName", getLastName()) //
                .add("email", getEmail()) //
                .add("password", getPassword()) //
                .add("isStaff", getIsStaff()) //
                .add("isActive", getIsActive()) //
                .add("isSuperuser", getIsSuperuser()) //
                .add("lastLogin", getLastLogin()) //
                .add("dateJoined", getDateJoined()) //
                .toString();
    }
}