/*
 * (c) Copyright 2005-2012 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend-jpa:src/main/java/project/domain/Entity.e.vm.java
 */
package com.app.mpadmin.domain;

import static javax.persistence.CascadeType.PERSIST;
import static javax.persistence.FetchType.LAZY;
import static javax.persistence.TemporalType.TIMESTAMP;
import static org.hibernate.annotations.CacheConcurrencyStrategy.NONSTRICT_READ_WRITE;
import java.io.Serializable;
import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.PrePersist;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.Transient;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlTransient;
import org.apache.log4j.Logger;
import org.hibernate.annotations.Cache;
import com.app.mpadmin.domain.PersistableHashBuilder;
import com.app.mpadmin.domain.TdCity;
import com.app.mpadmin.domain.TdCountry;
import com.app.mpadmin.domain.TdMetro;
import com.app.mpadmin.domain.TdState;
import com.google.common.base.Objects;

@Entity
@Table(name = "td_user_address")
@Cache(usage = NONSTRICT_READ_WRITE)
public class TdUserAddress implements Identifiable<Integer>, Serializable {
    private static final long serialVersionUID = 1L;
    private static final Logger log = Logger.getLogger(TdUserAddress.class);

    // Raw attributes
    private Integer userAddressId; // pk
    private String address1;
    private String address2;
    private Integer zipCode;
    private Integer userDetailsId;
    private Date creationDate;
    private Date updationDate;
    private Integer isActive;

    // Technical attributes for query by example
    private Integer cityId;
    private Integer countryId;
    private Integer stateId;
    private Integer metroId;

    // Many to one
    private TdCountry country; // (countryId)
    private TdState state; // (stateId)
    private TdCity city; // (cityId)
    private TdMetro metro; // (metroId)

    // ---------------------------
    // Constructors
    // ---------------------------

    public TdUserAddress() {
    }

    public TdUserAddress(Integer primaryKey) {
        setId(primaryKey);
    }

    // ---------------------------
    // Identifiable implementation
    // ---------------------------

    @Override
    @Transient
    @XmlTransient
    public Integer getId() {
        return getUserAddressId();
    }

    @Override
    public void setId(Integer userAddressId) {
        setUserAddressId(userAddressId);
    }

    @Override
    @Transient
    @XmlTransient
    public boolean isIdSet() {
        return isUserAddressIdSet();
    }

    // -------------------------------
    // Getter & Setter
    // -------------------------------

    // -- [userAddressId] ------------------------

    @Column(name = "user_address_id", precision = 10)
    @GeneratedValue
    @Id
    public Integer getUserAddressId() {
        return userAddressId;
    }

    public void setUserAddressId(Integer userAddressId) {
        this.userAddressId = userAddressId;
    }

    @Transient
    public boolean isUserAddressIdSet() {
        return userAddressId != null;
    }

    // -- [address1] ------------------------

    @Size(max = 90)
    @Column(name = "address_1", length = 90)
    public String getAddress1() {
        return address1;
    }

    public void setAddress1(String address1) {
        this.address1 = address1;
    }

    // -- [address2] ------------------------

    @Size(max = 90)
    @Column(name = "address_2", length = 90)
    public String getAddress2() {
        return address2;
    }

    public void setAddress2(String address2) {
        this.address2 = address2;
    }

    // -- [cityId] ------------------------

    @Column(name = "city_id", precision = 10, insertable = false, updatable = false)
    public Integer getCityId() {
        return cityId;
    }

    private void setCityId(Integer cityId) {
        this.cityId = cityId;
    }

    // -- [zipCode] ------------------------

    @Column(name = "zip_code", precision = 10)
    public Integer getZipCode() {
        return zipCode;
    }

    public void setZipCode(Integer zipCode) {
        this.zipCode = zipCode;
    }

    // -- [countryId] ------------------------

    @Column(name = "country_id", precision = 10, insertable = false, updatable = false)
    public Integer getCountryId() {
        return countryId;
    }

    private void setCountryId(Integer countryId) {
        this.countryId = countryId;
    }

    // -- [stateId] ------------------------

    @Column(name = "state_id", precision = 10, insertable = false, updatable = false)
    public Integer getStateId() {
        return stateId;
    }

    private void setStateId(Integer stateId) {
        this.stateId = stateId;
    }

    // -- [userDetailsId] ------------------------

    @Column(name = "user_details_id", precision = 10)
    public Integer getUserDetailsId() {
        return userDetailsId;
    }

    public void setUserDetailsId(Integer userDetailsId) {
        this.userDetailsId = userDetailsId;
    }

    // -- [metroId] ------------------------

    @Column(name = "metro_id", precision = 10, insertable = false, updatable = false)
    public Integer getMetroId() {
        return metroId;
    }

    private void setMetroId(Integer metroId) {
        this.metroId = metroId;
    }

    // -- [creationDate] ------------------------

    @Column(name = "creation_date", length = 19)
    @Temporal(TIMESTAMP)
    public Date getCreationDate() {
        return creationDate;
    }

    public void setCreationDate(Date creationDate) {
        this.creationDate = creationDate;
    }

    // -- [updationDate] ------------------------

    @Column(name = "updation_date", length = 19)
    @Temporal(TIMESTAMP)
    public Date getUpdationDate() {
        return updationDate;
    }

    public void setUpdationDate(Date updationDate) {
        this.updationDate = updationDate;
    }

    // -- [isActive] ------------------------

    @Column(name = "is_active", precision = 5)
    public Integer getIsActive() {
        return isActive;
    }

    public void setIsActive(Integer isActive) {
        this.isActive = isActive;
    }

    // --------------------------------------------------------------------
    // Many to One support
    // --------------------------------------------------------------------

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // many-to-one: TdUserAddress.countryId ==> TdCountry.countryId
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @Cache(usage = NONSTRICT_READ_WRITE)
    @JoinColumn(name = "country_id")
    @ManyToOne(cascade = PERSIST, fetch = LAZY)
    public TdCountry getCountry() {
        return country;
    }

    /**
     * Set the country without adding this TdUserAddress instance on the passed country
     * If you want to preserve referential integrity we recommend to use
     * instead the corresponding adder method provided by {@link TdCountry}
     */
    public void setCountry(TdCountry country) {
        this.country = country;

        // We set the foreign key property so it can be used by our JPA search by Example facility.
        if (country != null) {
            setCountryId(country.getCountryId());
        } else {
            setCountryId(null);
        }
    }

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // many-to-one: TdUserAddress.stateId ==> TdState.stateId
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @Cache(usage = NONSTRICT_READ_WRITE)
    @JoinColumn(name = "state_id")
    @ManyToOne(cascade = PERSIST, fetch = LAZY)
    public TdState getState() {
        return state;
    }

    /**
     * Set the state without adding this TdUserAddress instance on the passed state
     * If you want to preserve referential integrity we recommend to use
     * instead the corresponding adder method provided by {@link TdState}
     */
    public void setState(TdState state) {
        this.state = state;

        // We set the foreign key property so it can be used by our JPA search by Example facility.
        if (state != null) {
            setStateId(state.getStateId());
        } else {
            setStateId(null);
        }
    }

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // many-to-one: TdUserAddress.cityId ==> TdCity.cityId
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @Cache(usage = NONSTRICT_READ_WRITE)
    @JoinColumn(name = "city_id")
    @ManyToOne(cascade = PERSIST, fetch = LAZY)
    public TdCity getCity() {
        return city;
    }

    /**
     * Set the city without adding this TdUserAddress instance on the passed city
     * If you want to preserve referential integrity we recommend to use
     * instead the corresponding adder method provided by {@link TdCity}
     */
    public void setCity(TdCity city) {
        this.city = city;

        // We set the foreign key property so it can be used by our JPA search by Example facility.
        if (city != null) {
            setCityId(city.getCityId());
        } else {
            setCityId(null);
        }
    }

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // many-to-one: TdUserAddress.metroId ==> TdMetro.metroId
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @Cache(usage = NONSTRICT_READ_WRITE)
    @JoinColumn(name = "metro_id")
    @ManyToOne(cascade = PERSIST, fetch = LAZY)
    public TdMetro getMetro() {
        return metro;
    }

    /**
     * Set the metro without adding this TdUserAddress instance on the passed metro
     * If you want to preserve referential integrity we recommend to use
     * instead the corresponding adder method provided by {@link TdMetro}
     */
    public void setMetro(TdMetro metro) {
        this.metro = metro;

        // We set the foreign key property so it can be used by our JPA search by Example facility.
        if (metro != null) {
            setMetroId(metro.getMetroId());
        } else {
            setMetroId(null);
        }
    }

    /**
     * Set the default values.
     */
    public void initDefaultValues() {
    }

    /**
     * equals implementation using a business key.
     */
    @Override
    public boolean equals(Object other) {
        return this == other || (other instanceof TdUserAddress && hashCode() == other.hashCode());
    }

    private PersistableHashBuilder persistableHashBuilder = new PersistableHashBuilder();

    @Override
    public int hashCode() {
        return persistableHashBuilder.hash(log, this);
    }

    /**
     * Construct a readable string representation for this TdUserAddress instance.
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        return Objects.toStringHelper(this) //
                .add("userAddressId", getUserAddressId()) //
                .add("address1", getAddress1()) //
                .add("address2", getAddress2()) //
                .add("cityId", getCityId()) //
                .add("zipCode", getZipCode()) //
                .add("countryId", getCountryId()) //
                .add("stateId", getStateId()) //
                .add("userDetailsId", getUserDetailsId()) //
                .add("metroId", getMetroId()) //
                .add("creationDate", getCreationDate()) //
                .add("updationDate", getUpdationDate()) //
                .add("isActive", getIsActive()) //
                .toString();
    }

    @PrePersist
    protected void prePersist() {
        setCreationDate(new Date());
    }
}