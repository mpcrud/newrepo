/*
 * (c) Copyright 2005-2012 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend-jpa:src/main/java/project/domain/Entity.e.vm.java
 */
package com.app.mpadmin.domain;

import static javax.persistence.CascadeType.PERSIST;
import static javax.persistence.FetchType.LAZY;
import static javax.persistence.TemporalType.TIMESTAMP;
import static org.hibernate.annotations.CacheConcurrencyStrategy.NONSTRICT_READ_WRITE;
import java.io.Serializable;
import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.PrePersist;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.Transient;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlTransient;
import org.apache.log4j.Logger;
import org.hibernate.annotations.Cache;
import com.app.mpadmin.domain.PersistableHashBuilder;
import com.app.mpadmin.domain.TdUserActivity;
import com.google.common.base.Objects;

@Entity
@Table(name = "td_user_activity_event")
@Cache(usage = NONSTRICT_READ_WRITE)
public class TdUserActivityEvent implements Identifiable<Integer>, Serializable {
    private static final long serialVersionUID = 1L;
    private static final Logger log = Logger.getLogger(TdUserActivityEvent.class);

    // Raw attributes
    private Integer userActivityEventId; // pk
    private String userActivityName;
    private String userEventName;
    private String userEventDesc;
    private Date creationDate;
    private Date updationDate;

    // Technical attributes for query by example
    private Integer userActivityId;

    // Many to one
    private TdUserActivity userActivity; // (userActivityId)

    // ---------------------------
    // Constructors
    // ---------------------------

    public TdUserActivityEvent() {
    }

    public TdUserActivityEvent(Integer primaryKey) {
        setId(primaryKey);
    }

    // ---------------------------
    // Identifiable implementation
    // ---------------------------

    @Override
    @Transient
    @XmlTransient
    public Integer getId() {
        return getUserActivityEventId();
    }

    @Override
    public void setId(Integer userActivityEventId) {
        setUserActivityEventId(userActivityEventId);
    }

    @Override
    @Transient
    @XmlTransient
    public boolean isIdSet() {
        return isUserActivityEventIdSet();
    }

    // -------------------------------
    // Getter & Setter
    // -------------------------------

    // -- [userActivityEventId] ------------------------

    @Column(name = "user_activity_event_id", precision = 10)
    @GeneratedValue
    @Id
    public Integer getUserActivityEventId() {
        return userActivityEventId;
    }

    public void setUserActivityEventId(Integer userActivityEventId) {
        this.userActivityEventId = userActivityEventId;
    }

    @Transient
    public boolean isUserActivityEventIdSet() {
        return userActivityEventId != null;
    }

    // -- [userActivityId] ------------------------

    @Column(name = "user_activity_id", precision = 10, insertable = false, updatable = false)
    public Integer getUserActivityId() {
        return userActivityId;
    }

    private void setUserActivityId(Integer userActivityId) {
        this.userActivityId = userActivityId;
    }

    // -- [userActivityName] ------------------------

    @Size(max = 45)
    @Column(name = "user_activity_name", length = 45)
    public String getUserActivityName() {
        return userActivityName;
    }

    public void setUserActivityName(String userActivityName) {
        this.userActivityName = userActivityName;
    }

    // -- [userEventName] ------------------------

    @Size(max = 45)
    @Column(name = "user_event_name", length = 45)
    public String getUserEventName() {
        return userEventName;
    }

    public void setUserEventName(String userEventName) {
        this.userEventName = userEventName;
    }

    // -- [userEventDesc] ------------------------

    @Size(max = 300)
    @Column(name = "user_event_desc", length = 300)
    public String getUserEventDesc() {
        return userEventDesc;
    }

    public void setUserEventDesc(String userEventDesc) {
        this.userEventDesc = userEventDesc;
    }

    // -- [creationDate] ------------------------

    @Column(name = "creation_date", length = 19)
    @Temporal(TIMESTAMP)
    public Date getCreationDate() {
        return creationDate;
    }

    public void setCreationDate(Date creationDate) {
        this.creationDate = creationDate;
    }

    // -- [updationDate] ------------------------

    @Column(name = "updation_date", length = 19)
    @Temporal(TIMESTAMP)
    public Date getUpdationDate() {
        return updationDate;
    }

    public void setUpdationDate(Date updationDate) {
        this.updationDate = updationDate;
    }

    // --------------------------------------------------------------------
    // Many to One support
    // --------------------------------------------------------------------

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // many-to-one: TdUserActivityEvent.userActivityId ==> TdUserActivity.userActivityId
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @Cache(usage = NONSTRICT_READ_WRITE)
    @JoinColumn(name = "user_activity_id")
    @ManyToOne(cascade = PERSIST, fetch = LAZY)
    public TdUserActivity getUserActivity() {
        return userActivity;
    }

    /**
     * Set the userActivity without adding this TdUserActivityEvent instance on the passed userActivity
     * If you want to preserve referential integrity we recommend to use
     * instead the corresponding adder method provided by {@link TdUserActivity}
     */
    public void setUserActivity(TdUserActivity userActivity) {
        this.userActivity = userActivity;

        // We set the foreign key property so it can be used by our JPA search by Example facility.
        if (userActivity != null) {
            setUserActivityId(userActivity.getUserActivityId());
        } else {
            setUserActivityId(null);
        }
    }

    /**
     * Set the default values.
     */
    public void initDefaultValues() {
    }

    /**
     * equals implementation using a business key.
     */
    @Override
    public boolean equals(Object other) {
        return this == other || (other instanceof TdUserActivityEvent && hashCode() == other.hashCode());
    }

    private PersistableHashBuilder persistableHashBuilder = new PersistableHashBuilder();

    @Override
    public int hashCode() {
        return persistableHashBuilder.hash(log, this);
    }

    /**
     * Construct a readable string representation for this TdUserActivityEvent instance.
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        return Objects.toStringHelper(this) //
                .add("userActivityEventId", getUserActivityEventId()) //
                .add("userActivityId", getUserActivityId()) //
                .add("userActivityName", getUserActivityName()) //
                .add("userEventName", getUserEventName()) //
                .add("userEventDesc", getUserEventDesc()) //
                .add("creationDate", getCreationDate()) //
                .add("updationDate", getUpdationDate()) //
                .toString();
    }

    @PrePersist
    protected void prePersist() {
        setCreationDate(new Date());
    }
}