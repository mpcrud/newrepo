/*
 * (c) Copyright 2005-2012 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend-jpa:src/test/java/service/ServiceImplTest.e.vm.java
 */
package com.app.mpadmin.repository;

import static org.fest.assertions.Assertions.*;
import static org.mockito.Matchers.*;
import static org.mockito.Mockito.*;

import javax.persistence.NonUniqueResultException;
import javax.persistence.NoResultException;

import org.junit.Before;
import org.junit.Test;

import com.app.mpadmin.domain.TdCountry;
import com.app.mpadmin.repository.TdCountryRepositoryImpl;
import com.app.mpadmin.dao.TdCountryDao;
import com.app.mpadmin.dao.support.SearchParameters;

/**
 * Unit test on TdCountryRepositoryImpl
 */
public class TdCountryRepositoryImplTest {

    private TdCountryRepositoryImpl tdCountryRepositoryImpl;
    private TdCountryDao tdCountryDao;

    @Before
    public void setUp() {
        // called before each test.
        tdCountryRepositoryImpl = new TdCountryRepositoryImpl();
        tdCountryDao = mock(TdCountryDao.class);
        tdCountryRepositoryImpl.setTdCountryDao(tdCountryDao);
    }

    @Test
    public void testFindUniqueOrNoneCaseNone() {
        TdCountry none = null;

        when(tdCountryDao.findUniqueOrNone(any(TdCountry.class), any(SearchParameters.class))).thenReturn(none);

        TdCountry result = tdCountryRepositoryImpl.findUniqueOrNone(new TdCountry());

        assertThat(result).isNull();
        verify(tdCountryDao, times(1)).findUniqueOrNone(any(TdCountry.class), any(SearchParameters.class));
    }

    @Test
    public void testFindUniqueOrNoneCaseUnique() {
        TdCountry unique = new TdCountry();

        when(tdCountryDao.findUniqueOrNone(any(TdCountry.class), any(SearchParameters.class))).thenReturn(unique);

        TdCountry result = tdCountryRepositoryImpl.findUniqueOrNone(new TdCountry());

        assertThat(result).isNotNull();
        verify(tdCountryDao, times(1)).findUniqueOrNone(any(TdCountry.class), any(SearchParameters.class));
    }

    @SuppressWarnings("unchecked")
    @Test(expected = NonUniqueResultException.class)
    public void testFindUniqueOrNoneCaseMultiple() {
        when(tdCountryDao.findUniqueOrNone(any(TdCountry.class), any(SearchParameters.class))).thenThrow(NonUniqueResultException.class);

        tdCountryRepositoryImpl.findUniqueOrNone(new TdCountry());
    }

    @SuppressWarnings("unchecked")
    @Test(expected = NoResultException.class)
    public void testFindUniqueCaseNone() {
        when(tdCountryDao.findUnique(any(TdCountry.class), any(SearchParameters.class))).thenThrow(NoResultException.class);

        tdCountryRepositoryImpl.findUnique(new TdCountry());
    }

    @Test
    public void testFindUniqueCaseUnique() {
        TdCountry unique = new TdCountry();

        when(tdCountryDao.findUnique(any(TdCountry.class), any(SearchParameters.class))).thenReturn(unique);

        TdCountry result = tdCountryRepositoryImpl.findUnique(new TdCountry());

        assertThat(result).isNotNull();
        verify(tdCountryDao, times(1)).findUnique(any(TdCountry.class), any(SearchParameters.class));
    }

    @SuppressWarnings("unchecked")
    @Test(expected = NonUniqueResultException.class)
    public void testFindUniqueCaseMultiple() {
        when(tdCountryDao.findUnique(any(TdCountry.class), any(SearchParameters.class))).thenThrow(NonUniqueResultException.class);

        tdCountryRepositoryImpl.findUnique(new TdCountry());
    }
}