/*
 * (c) Copyright 2005-2012 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend-jpa:src/test/java/service/ServiceImplTest.e.vm.java
 */
package com.app.mpadmin.repository;

import static org.fest.assertions.Assertions.*;
import static org.mockito.Matchers.*;
import static org.mockito.Mockito.*;

import javax.persistence.NonUniqueResultException;
import javax.persistence.NoResultException;

import org.junit.Before;
import org.junit.Test;

import com.app.mpadmin.domain.TempTdSubmodelYearMapping;
import com.app.mpadmin.repository.TempTdSubmodelYearMappingRepositoryImpl;
import com.app.mpadmin.dao.TempTdSubmodelYearMappingDao;
import com.app.mpadmin.dao.support.SearchParameters;

/**
 * Unit test on TempTdSubmodelYearMappingRepositoryImpl
 */
public class TempTdSubmodelYearMappingRepositoryImplTest {

    private TempTdSubmodelYearMappingRepositoryImpl tempTdSubmodelYearMappingRepositoryImpl;
    private TempTdSubmodelYearMappingDao tempTdSubmodelYearMappingDao;

    @Before
    public void setUp() {
        // called before each test.
        tempTdSubmodelYearMappingRepositoryImpl = new TempTdSubmodelYearMappingRepositoryImpl();
        tempTdSubmodelYearMappingDao = mock(TempTdSubmodelYearMappingDao.class);
        tempTdSubmodelYearMappingRepositoryImpl.setTempTdSubmodelYearMappingDao(tempTdSubmodelYearMappingDao);
    }

    @Test
    public void testFindUniqueOrNoneCaseNone() {
        TempTdSubmodelYearMapping none = null;

        when(tempTdSubmodelYearMappingDao.findUniqueOrNone(any(TempTdSubmodelYearMapping.class), any(SearchParameters.class))).thenReturn(none);

        TempTdSubmodelYearMapping result = tempTdSubmodelYearMappingRepositoryImpl.findUniqueOrNone(new TempTdSubmodelYearMapping());

        assertThat(result).isNull();
        verify(tempTdSubmodelYearMappingDao, times(1)).findUniqueOrNone(any(TempTdSubmodelYearMapping.class), any(SearchParameters.class));
    }

    @Test
    public void testFindUniqueOrNoneCaseUnique() {
        TempTdSubmodelYearMapping unique = new TempTdSubmodelYearMapping();

        when(tempTdSubmodelYearMappingDao.findUniqueOrNone(any(TempTdSubmodelYearMapping.class), any(SearchParameters.class))).thenReturn(unique);

        TempTdSubmodelYearMapping result = tempTdSubmodelYearMappingRepositoryImpl.findUniqueOrNone(new TempTdSubmodelYearMapping());

        assertThat(result).isNotNull();
        verify(tempTdSubmodelYearMappingDao, times(1)).findUniqueOrNone(any(TempTdSubmodelYearMapping.class), any(SearchParameters.class));
    }

    @SuppressWarnings("unchecked")
    @Test(expected = NonUniqueResultException.class)
    public void testFindUniqueOrNoneCaseMultiple() {
        when(tempTdSubmodelYearMappingDao.findUniqueOrNone(any(TempTdSubmodelYearMapping.class), any(SearchParameters.class))).thenThrow(
                NonUniqueResultException.class);

        tempTdSubmodelYearMappingRepositoryImpl.findUniqueOrNone(new TempTdSubmodelYearMapping());
    }

    @SuppressWarnings("unchecked")
    @Test(expected = NoResultException.class)
    public void testFindUniqueCaseNone() {
        when(tempTdSubmodelYearMappingDao.findUnique(any(TempTdSubmodelYearMapping.class), any(SearchParameters.class))).thenThrow(NoResultException.class);

        tempTdSubmodelYearMappingRepositoryImpl.findUnique(new TempTdSubmodelYearMapping());
    }

    @Test
    public void testFindUniqueCaseUnique() {
        TempTdSubmodelYearMapping unique = new TempTdSubmodelYearMapping();

        when(tempTdSubmodelYearMappingDao.findUnique(any(TempTdSubmodelYearMapping.class), any(SearchParameters.class))).thenReturn(unique);

        TempTdSubmodelYearMapping result = tempTdSubmodelYearMappingRepositoryImpl.findUnique(new TempTdSubmodelYearMapping());

        assertThat(result).isNotNull();
        verify(tempTdSubmodelYearMappingDao, times(1)).findUnique(any(TempTdSubmodelYearMapping.class), any(SearchParameters.class));
    }

    @SuppressWarnings("unchecked")
    @Test(expected = NonUniqueResultException.class)
    public void testFindUniqueCaseMultiple() {
        when(tempTdSubmodelYearMappingDao.findUnique(any(TempTdSubmodelYearMapping.class), any(SearchParameters.class))).thenThrow(
                NonUniqueResultException.class);

        tempTdSubmodelYearMappingRepositoryImpl.findUnique(new TempTdSubmodelYearMapping());
    }
}