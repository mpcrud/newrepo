/*
 * (c) Copyright 2005-2012 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend-jpa:src/test/java/domain/ModelTest.e.vm.java
 */
package com.app.mpadmin.domain;

import java.io.*;
import java.util.*;

import static org.junit.Assert.*;
import org.junit.Test;

import com.app.mpadmin.util.*;
import static javax.persistence.CascadeType.PERSIST;
import static javax.persistence.FetchType.LAZY;
import static javax.persistence.TemporalType.TIMESTAMP;
import static org.hibernate.annotations.CacheConcurrencyStrategy.NONSTRICT_READ_WRITE;
import java.io.Serializable;
import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.Transient;
import javax.validation.constraints.Size;
import org.apache.log4j.Logger;
import org.hibernate.annotations.Cache;
import com.app.mpadmin.domain.TdCity;
import com.app.mpadmin.domain.TdCountry;
import com.app.mpadmin.domain.TdMetro;
import com.app.mpadmin.domain.TdState;

/**
 * Basic tests for TdUserAddress
 */
@SuppressWarnings("unused")
public class TdUserAddressTest {

    // test unique primary key
    @Test
    public void newInstanceHasNoPrimaryKey() {
        TdUserAddress model = new TdUserAddress();
        assertFalse(model.isIdSet());
    }

    @Test
    public void isIdSetReturnsTrue() {
        TdUserAddress model = new TdUserAddress();
        model.setUserAddressId(ValueGenerator.getUniqueInteger());
        assertNotNull(model.getUserAddressId());
        assertTrue(model.isIdSet());
    }

    // test columns methods

    //-------------------------------------------------------------
    // Many to One:  TdUserAddress.countryId ==> TdCountry.countryId
    //-------------------------------------------------------------

    @Test
    public void manyToOne_setCountry() {
        TdUserAddress many = new TdUserAddress();

        // init
        TdCountry one = new TdCountry();

        one.setCountryId(ValueGenerator.getUniqueInteger());
        many.setCountry(one);

        // make sure it is propagated properly
        assertNotNull(many.getCountryId());
        assertEquals(one, many.getCountry());
        assertSame(many.getCountryId(), one.getCountryId());
        // now set it to back to null
        many.setCountry(null);

        // make sure null is propagated properly
        assertNull(many.getCountry());

        // make sure it is propagated on fk column as well
        assertNull(many.getCountryId());
    }

    @Test
    public void manyToOne_setState() {
        TdUserAddress many = new TdUserAddress();

        // init
        TdState one = new TdState();

        one.setStateId(ValueGenerator.getUniqueInteger());
        many.setState(one);

        // make sure it is propagated properly
        assertNotNull(many.getStateId());
        assertEquals(one, many.getState());
        assertSame(many.getStateId(), one.getStateId());
        // now set it to back to null
        many.setState(null);

        // make sure null is propagated properly
        assertNull(many.getState());

        // make sure it is propagated on fk column as well
        assertNull(many.getStateId());
    }

    @Test
    public void manyToOne_setCity() {
        TdUserAddress many = new TdUserAddress();

        // init
        TdCity one = new TdCity();

        one.setCityId(ValueGenerator.getUniqueInteger());
        many.setCity(one);

        // make sure it is propagated properly
        assertNotNull(many.getCityId());
        assertEquals(one, many.getCity());
        assertSame(many.getCityId(), one.getCityId());
        // now set it to back to null
        many.setCity(null);

        // make sure null is propagated properly
        assertNull(many.getCity());

        // make sure it is propagated on fk column as well
        assertNull(many.getCityId());
    }

    @Test
    public void manyToOne_setMetro() {
        TdUserAddress many = new TdUserAddress();

        // init
        TdMetro one = new TdMetro();

        one.setMetroId(ValueGenerator.getUniqueInteger());
        many.setMetro(one);

        // make sure it is propagated properly
        assertNotNull(many.getMetroId());
        assertEquals(one, many.getMetro());
        assertSame(many.getMetroId(), one.getMetroId());
        // now set it to back to null
        many.setMetro(null);

        // make sure null is propagated properly
        assertNull(many.getMetro());

        // make sure it is propagated on fk column as well
        assertNull(many.getMetroId());
    }

    @Test
    public void toStringNotNull() {
        TdUserAddress model = new TdUserAddress();
        assertNotNull(model.toString());
    }

    @Test
    public void equalsUsingPk() {
        TdUserAddress model1 = new TdUserAddress();
        TdUserAddress model2 = new TdUserAddress();

        Integer userAddressId = ValueGenerator.getUniqueInteger();
        model1.setUserAddressId(userAddressId);
        model2.setUserAddressId(userAddressId);

        model1.setAddress1("a");
        model2.setAddress1("a");

        model1.setAddress2("a");
        model2.setAddress2("a");

        model1.setZipCode(1);
        model2.setZipCode(1);

        model1.setUserDetailsId(1);
        model2.setUserDetailsId(1);

        model1.setCreationDate(new Date());
        model2.setCreationDate(new Date());

        model1.setUpdationDate(new Date());
        model2.setUpdationDate(new Date());

        model1.setIsActive(1);
        model2.setIsActive(1);
        assertTrue(model1.isIdSet());
        assertTrue(model2.isIdSet());
        assertTrue(model1.hashCode() == model2.hashCode());
        assertTrue(model1.equals(model2));
        assertTrue(model2.equals(model1));
    }
}