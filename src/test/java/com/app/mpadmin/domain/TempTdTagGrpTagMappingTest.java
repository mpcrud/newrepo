/*
 * (c) Copyright 2005-2012 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend-jpa:src/test/java/domain/ModelTest.e.vm.java
 */
package com.app.mpadmin.domain;

import java.io.*;
import java.util.*;

import static org.junit.Assert.*;
import org.junit.Test;

import com.app.mpadmin.util.*;
import static org.hibernate.annotations.CacheConcurrencyStrategy.NONSTRICT_READ_WRITE;
import java.io.Serializable;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;
import javax.validation.constraints.NotNull;
import org.apache.log4j.Logger;
import org.hibernate.annotations.Cache;

/**
 * Basic tests for TempTdTagGrpTagMapping
 */
@SuppressWarnings("unused")
public class TempTdTagGrpTagMappingTest {
    // test composite primary key

    @Test
    public void newInstanceHasNoPrimaryKey() {
        TempTdTagGrpTagMapping model = new TempTdTagGrpTagMapping();
        assertNotNull(model.getTempTdTagGrpTagMappingPk());
        assertFalse(model.isIdSet());
    }

    @Test
    public void setEmptyCompositePrimaryKey() {
        TempTdTagGrpTagMapping model = new TempTdTagGrpTagMapping();
        TempTdTagGrpTagMappingPk pk = new TempTdTagGrpTagMappingPk();
        model.setTempTdTagGrpTagMappingPk(pk);
        assertFalse(model.isIdSet());
        assertSame(pk, model.getTempTdTagGrpTagMappingPk());
    }

    @Test
    public void setValidCompositePrimaryKey() {
        TempTdTagGrpTagMapping model = new TempTdTagGrpTagMapping();
        TempTdTagGrpTagMappingPk pk = new TempTdTagGrpTagMappingPk();
        pk.setTagGrpId(ValueGenerator.getUniqueInteger());
        pk.setTagId(ValueGenerator.getUniqueInteger());
        model.setTempTdTagGrpTagMappingPk(pk);

        assertTrue(model.isIdSet());
        assertSame(pk, model.getTempTdTagGrpTagMappingPk());
    }

    // test columns methods

    //-------------------------------------------------------------
    // Composite Pk getter & setter
    //-------------------------------------------------------------

    @Test
    public void compositePrimaryKey_setTempTdTagGrpTagMappingPk() {
        TempTdTagGrpTagMapping model = new TempTdTagGrpTagMapping();
        assertNotNull(model.getTempTdTagGrpTagMappingPk());

        assertNull(model.getTagGrpId());
        assertNull(model.getTagId());

        TempTdTagGrpTagMappingPk pk = new TempTdTagGrpTagMappingPk();

        Integer tagGrpId = ValueGenerator.getUniqueInteger();
        pk.setTagGrpId(tagGrpId);
        Integer tagId = ValueGenerator.getUniqueInteger();
        pk.setTagId(tagId);

        model.setTempTdTagGrpTagMappingPk(pk);

        assertEquals(tagGrpId, model.getTagGrpId());
        assertEquals(tagId, model.getTagId());
    }

    @Test
    public void toStringNotNull() {
        TempTdTagGrpTagMapping model = new TempTdTagGrpTagMapping();
        assertNotNull(model.toString());
    }

    @Test
    public void equalsUsingPk() {
        TempTdTagGrpTagMapping model1 = new TempTdTagGrpTagMapping();
        TempTdTagGrpTagMapping model2 = new TempTdTagGrpTagMapping();

        Integer tagGrpId = ValueGenerator.getUniqueInteger();
        model1.setTagGrpId(tagGrpId);
        model2.setTagGrpId(tagGrpId);

        Integer tagId = ValueGenerator.getUniqueInteger();
        model1.setTagId(tagId);
        model2.setTagId(tagId);
        assertTrue(model1.isIdSet());
        assertTrue(model2.isIdSet());
        assertTrue(model1.hashCode() == model2.hashCode());
        assertTrue(model1.equals(model2));
        assertTrue(model2.equals(model1));
    }
}