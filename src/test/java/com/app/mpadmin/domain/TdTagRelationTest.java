/*
 * (c) Copyright 2005-2012 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend-jpa:src/test/java/domain/ModelTest.e.vm.java
 */
package com.app.mpadmin.domain;

import java.io.*;
import java.util.*;

import static org.junit.Assert.*;
import org.junit.Test;

import com.app.mpadmin.util.*;
import static javax.persistence.CascadeType.PERSIST;
import static javax.persistence.FetchType.LAZY;
import static javax.persistence.TemporalType.TIMESTAMP;
import static org.hibernate.annotations.CacheConcurrencyStrategy.NONSTRICT_READ_WRITE;
import java.io.Serializable;
import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.Transient;
import javax.validation.constraints.NotNull;
import org.apache.log4j.Logger;
import org.hibernate.annotations.Cache;
import com.app.mpadmin.domain.TdTag;

/**
 * Basic tests for TdTagRelation
 */
@SuppressWarnings("unused")
public class TdTagRelationTest {

    // test unique primary key
    @Test
    public void newInstanceHasNoPrimaryKey() {
        TdTagRelation model = new TdTagRelation();
        assertFalse(model.isIdSet());
    }

    @Test
    public void isIdSetReturnsTrue() {
        TdTagRelation model = new TdTagRelation();
        model.setTagRelationId(ValueGenerator.getUniqueInteger());
        assertNotNull(model.getTagRelationId());
        assertTrue(model.isIdSet());
    }

    // test columns methods

    //-------------------------------------------------------------
    // Many to One:  TdTagRelation.parentTagId ==> TdTag.tagId
    //-------------------------------------------------------------

    @Test
    public void manyToOne_setParentTag() {
        TdTagRelation many = new TdTagRelation();

        // init
        TdTag one = new TdTag();

        one.setTagId(ValueGenerator.getUniqueInteger());
        many.setParentTag(one);

        // make sure it is propagated properly
        assertNotNull(many.getParentTagId());
        assertEquals(one, many.getParentTag());
        assertSame(many.getParentTagId(), one.getTagId());
        // now set it to back to null
        many.setParentTag(null);

        // make sure null is propagated properly
        assertNull(many.getParentTag());

        // make sure it is propagated on fk column as well
        assertNull(many.getParentTagId());
    }

    @Test
    public void manyToOne_setCurrentTag() {
        TdTagRelation many = new TdTagRelation();

        // init
        TdTag one = new TdTag();

        one.setTagId(ValueGenerator.getUniqueInteger());
        many.setCurrentTag(one);

        // make sure it is propagated properly
        assertNotNull(many.getCurrentTagId());
        assertEquals(one, many.getCurrentTag());
        assertSame(many.getCurrentTagId(), one.getTagId());
        // now set it to back to null
        many.setCurrentTag(null);

        // make sure null is propagated properly
        assertNull(many.getCurrentTag());

        // make sure it is propagated on fk column as well
        assertNull(many.getCurrentTagId());
    }

    @Test
    public void toStringNotNull() {
        TdTagRelation model = new TdTagRelation();
        assertNotNull(model.toString());
    }

    @Test
    public void equalsUsingPk() {
        TdTagRelation model1 = new TdTagRelation();
        TdTagRelation model2 = new TdTagRelation();

        Integer tagRelationId = ValueGenerator.getUniqueInteger();
        model1.setTagRelationId(tagRelationId);
        model2.setTagRelationId(tagRelationId);

        model1.setCreationDate(new Date());
        model2.setCreationDate(new Date());

        model1.setUpdationDate(new Date());
        model2.setUpdationDate(new Date());

        model1.setTagStatus(1);
        model2.setTagStatus(1);

        model1.setIsActive(1);
        model2.setIsActive(1);
        assertTrue(model1.isIdSet());
        assertTrue(model2.isIdSet());
        assertTrue(model1.hashCode() == model2.hashCode());
        assertTrue(model1.equals(model2));
        assertTrue(model2.equals(model1));
    }
}